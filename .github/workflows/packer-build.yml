name: Build and Deploy Application

on:
  push:
    branches:
      - main
      - dev

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install dependencies
        run: npm install

      - name: Build Application Artifact
        run: |
          npm run build
          zip -r application.zip .

      - name: Check contents of application.zip
        run: |
          unzip -l application.zip | awk '{print $4}' | tail -n +4 | head -n -2

      - name: Verify Artifact
        run: |
          if [ ! -f ./application.zip ]; then
            echo "Error: application.zip not found!"
            exit 1
          fi

      - name: Configure AWS Credentials for Dev
        if: github.ref == 'refs/heads/dev'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      - name: Configure AWS Credentials for Demo
        if: github.ref == 'refs/heads/main'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      - name: Install Packer
        uses: hashicorp/setup-packer@v2
        with:
          packer_version: latest

      - name: Create Packer variables file
        run: |
          echo 'artifact_path = "application.zip"' > variables.pkrvars.hcl

      - name: Build Custom Packer Image
        id: packer
        run: |
          # Get VPC ID with proper filter
          VPC_ID=$(aws ec2 describe-vpcs --filters "Name=tag:Name,Values=demo-vpc" --query 'Vpcs[0].VpcId' --output text)



          if [ -z "$VPC_ID" ]; then
            echo "Error: No VPC found with the specified tag"
            exit 1
          fi

          # Debug output
          echo "Listing available subnets in VPC:"
          aws ec2 describe-subnets --filters "Name=vpc-id,Values=${VPC_ID}" --query 'Subnets[*].[SubnetId,Tags[?Key==`Name`].Value]' --output text

          packer init .
          packer build \
            -var "vpc_id=${VPC_ID}" \
            -var-file=variables.pkrvars.hcl \
            ./webapp-ami.pkr.hcl

          # Get and set the AMI ID
          AMI_ID=$(aws ec2 describe-images --owners self --filters "Name=name,Values=csye6225-*" --query 'sort_by(Images, &CreationDate)[-1].ImageId' --output text)
          if [ -z "$AMI_ID" ] || [ "$AMI_ID" = "None" ]; then
            echo "Error: No AMI found"
            exit 1
          fi     
          echo "ami_id=${AMI_ID}" >> $GITHUB_OUTPUT

      - name: Share AMI with Demo Account
        if: github.ref == 'refs/heads/dev'
        run: |
          AMI_ID=$(aws ec2 describe-images --owners self --filters "Name=name,Values=csye6225-*" --query 'sort_by(Images, &CreationDate)[-1].ImageId' --output text)
          aws ec2 modify-image-attribute \
            --image-id $AMI_ID \
            --launch-permission "Add=[{UserId=${{ secrets.DEMO_ACCOUNT_ID }}}]"

      - name: Update Launch Template
        id: launch-template
        run: |

          # Get the AMI ID from previous step
          AMI_ID="${{ steps.packer.outputs.ami_id }}"

          # Create new version with new AMI
          NEW_VERSION=$(aws ec2 create-launch-template-version \
            --launch-template-id ${{ secrets.LAUNCH_TEMPLATE_ID }} \
            --source-version '$Latest' \
            --launch-template-data "{\"ImageId\":\"${{ steps.packer.outputs.ami_id }}\"}" \
            --query 'LaunchTemplateVersion.VersionNumber' \
            --output text)

          # Update default version
          aws ec2 modify-launch-template \
            --launch-template-id ${{ secrets.LAUNCH_TEMPLATE_ID }} \
            --default-version $NEW_VERSION

      - name: Start Instance Refresh
        id: refresh
        run: |
          ASG_NAME=$(aws autoscaling describe-auto-scaling-groups \
            --query 'AutoScalingGroups[?contains(Tags[?Key==`Name`].Value, `web-app-asg`)].AutoScalingGroupName' \
            --output text)

          REFRESH_ID=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name $ASG_NAME \
            --preferences '{"MinHealthyPercentage": 90, "InstanceWarmup": 300}' \
            --query 'InstanceRefreshId' \
            --output text)

          echo "refresh_id=${REFRESH_ID}" >> $GITHUB_OUTPUT
          echo "asg_name=${ASG_NAME}" >> $GITHUB_OUTPUT

      - name: Wait for Instance Refresh
        run: |
          while true; do
            STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name ${{ steps.refresh.outputs.asg_name }} \
              --instance-refresh-ids ${{ steps.refresh.outputs.refresh_id }} \
              --query 'InstanceRefreshes[0].Status' \
              --output text)
            
            echo "Instance Refresh Status: $STATUS"
            
            if [ "$STATUS" = "Successful" ]; then
              echo "Instance refresh completed successfully"
              exit 0
            elif [ "$STATUS" = "Failed" ] || [ "$STATUS" = "Cancelled" ]; then
              echo "Instance refresh failed or was cancelled"
              exit 1
            fi
            
            echo "Waiting for instance refresh to complete..."
            sleep 30
          done

      - name: Verify Deployment
        run: |
          echo "Deployment Summary:"
          echo "New AMI ID: ${{ steps.packer.outputs.ami_id }}"
          echo "Launch Template Version: ${{ steps.launch-template.outputs.launch_template_version }}"
          echo "Instance Refresh Status: Completed"
